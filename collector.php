<?php
/**
 * This file includes {@link SimpleCollector} and {@link SimplePatternCollector}
 *
 * @author Travis Swicegood <development@domain51.com>
 * @package SimpleTest
 * @subpackage UnitTester
 * @version $Id$
 */
 
 
/**
 * This provides a means for collecting all of the files at a given path.
 *
 * @package SimpleTest
 * @subpackage UnitTester 
 */
class SimpleCollector
{
   /**
    * Stores a reference to the object that this collector was created for
    *
    * @var object
    * @access protected
    */
    var $_caller = null;
    
    
   /** 
    * Stores the path where the collection should start.
    *
    * @var string
    * @access protected
    */
    var $_path = null;
    
    
   /**
    * Handles initialization of SimpleCollector
    *
    * This takes a derivative from {@link GroupTest} as it's first parameter
    * and the path at which it should start storing data.
    *
    * $caller must have a addTestFile() method.
    * $path must be a valid and readable directory.
    *
    * @param object
    * @param string
    */
    function SimpleCollector(&$caller, $path)
    {
        assert('method_exists($caller, "addTestFile")');
        assert('is_dir($path) && is_readable($path)');
        
        $this->_caller = $caller;
        $this->_path = $path;
    }
    
    
   /**
    * Scans the directory and adds what it can.
    *
    * @see _attemptToAdd()
    */
    function collect()
    {
        foreach (scandir($this->_path) as $file) {
            $this->_attemptToAdd($this->_path . '/' . $file);
        }
    }
    
    
   /**
    * This method determines what should be done with a given file and adds
    * it via {@link GroupTest::addTestFile()} if necessary.
    *
    * This method should be overriden to provide custom matching criteria, 
    * such as pattern matching, recursive matching, etc.  For an example, see
    * {@link SimplePatternCollector::_attemptToAdd()}.
    *
    * @param string
    *   A filename as generated by {@link collect()}
    * @see collect()
    * @access protected
    */
    function _attemptToAdd($filename)
    {
        if (!is_dir($filename)) {
            $this->_caller->addTestFile($filename);
        }
    }
}


/**
 * This attempts to collect files at a given location based on a given PCRE 
 * pattern.
 *
 * @package SimpleTest
 * @subpackage UnitTester
 * @see SimpleCollector
 */
class SimplePatternCollector extends SimpleCollector
{
   /**
    * Contains a string by which to match files.
    *
    * @var string
    * @access protected
    */
    var $_pattern = null;
    
    
   /**
    * Handles initialization.
    *
    * This takes three arguments, the first two of which are the same as
    * {@link SimpleCollector::SimpleCollector()}, the third specifies a
    * pattern that matches 
    * {@link http://us4.php.net/manual/en/reference.pcre.pattern.syntax.php PHP's PCRE}.
    *
    * No verification is done on the pattern, so it is incumbent about the
    * developer to insure it is a proper pattern.
    *
    * @param object
    * @param string
    * @param string
    */
    function SimplePatternCollector(&$caller, $path, $pattern = '/php$/')
    {
        parent::SimpleCollector($caller, $path);
        
        $this->_pattern = $pattern;
    }
    
    
   /**
    * Attempts to add files that match a given pattern.
    *
    * @see SimpleCollector::_attemptToAdd()
    * @access protected
    */
    function _attemptToAdd($filename)
    {
        if (preg_match($this->_pattern, $filename)) {
            parent::_attemptToAdd($filename);
        }
    }
}

