<?xml version="1.0"?>
<page title="Authentication documentation" here="Authentication">
    <long_title>Simple Test documentation for testing log-in and authentication</long_title>
    <content>
        <introduction>
            <p>
                One of the trickiest, and yet most important, areas
                of testing web sites is the security.
                Testing these schemes is one of the core goals of
                the SimpleTest web tester.
            </p>
        </introduction>
        <section name="basic" title="Basic HTTP authentication">
            <p>
                If you fetch a page protected by basic authentication then
                rather than receiving content, you will instead get a 401
                header.
                We can illustrate this with this test...
<php><![CDATA[
class AuthenticationTest extends WebTestCase {<strong>
    function test401Header() {
        $this->get('http://www.lastcraft.com/protected/');
        $this->showHeaders();
    }</strong>
}
]]></php>
                This allows us to see the challenge header...
                <div class="demo">
                    <h1>File test</h1>
<pre style="background-color: light-grey"><![CDATA[
HTTP/1.1 401 Authorization Required
Date: Sat, 18 Sep 2004 19:25:18 GMT
Server: Apache/1.3.29 (Unix) PHP/4.3.4
WWW-Authenticate: Basic realm="SimpleTest basic authentication"
Connection: close
Content-Type: text/html; charset=iso-8859-1
]]></pre>
                    <div style="padding: 8px; margin-top: 1em; background-color: green; color: white;">1/1 test cases complete.
                    <strong>0</strong> passes, <strong>0</strong> fails and <strong>0</strong> exceptions.</div>
                </div>
                We are trying to get away from visual inspection though, and so SimpleTest
                allows to make automated assertions against the challenge.
                Here is a thorough test of our header...
<php><![CDATA[
class AuthenticationTest extends WebTestCase {
    function test401Header() {
        $this->get('http://www.lastcraft.com/protected/');<strong>
        $this->assertAuthentication('Basic');
        $this->assertResponse(401);
        $this->assertRealm('SimpleTest basic authentication');</strong>
    }
}
]]></php>
                Any one of these tests would normally do on it's own depending
                on the amount of detail you want to see.
            </p>
            <p>
                Most of the time we are not interested in testing the
                authentication itself, but want to get past it to test
                the pages underneath.
                As soon as the challenge has been issued we can reply with
                an authentication response...
<php><![CDATA[
class AuthenticationTest extends WebTestCase {
    function test401Header() {
        $this->get('http://www.lastcraft.com/protected/');<strong>
        $this->authenticate('Me', 'Secret');</strong>
        $this->assertTitle(...);
    }
}
]]></php>
                The username and password will now be sent with every
                subsequent request to that directory and subdirectories.
                You will have to authenticate again if you step outside
                the authenticated directory, but SimpleTest is smart enough
                to merge subdirectories into a common realm.
            </p>
            <p>
                Only basic authentication is currently supported and this is
                only really secure in tandem with HTTPS connections.
                This is usually enough to protect test server from prying eyes,
                however.
                Digest authentication and NTLM authentication may be added
                in the future.
            </p>
        </section>
        <section name="cookies" title="Cookies">
            <p>
                Basic authentication doesn't give enough control over the
                user interface for web developers.
                More likely this functionality will be coded directly into
                the web architecture using cookies and complicated timeouts.
            </p>
            <p>
                Starting with a simple log-in form...
<pre><![CDATA[
<form>
    Username:
    <input type="text" name="u" value="" /><br />
    Password:
    <input type="password" name="p" value="" /><br />
    <input type="submit" value="Log in" />
</form>
]]></pre>
                Which looks like...
            </p>
            <p>
                <form class="demo">
                    Username:
                    <input type="text" name="u" value="" /><br />
                    Password:
                    <input type="password" name="p" value="" /><br />
                    <input type="submit" value="Log in" />
                </form>
            </p>
            <p>
                Let's suppose that in fetching this page a cookie has been
                set with a session ID.
                We are not going to fill the form in yet, just test that
                we are tracking the user.
                Here is the test...
<php><![CDATA[
class LogInTest extends WebTestCase {
    function testSessionCookieSetBeforeForm() {
        $this->get('http://www.my-site.com/login.php');<strong>
        $this->assertCookie('SID');</strong>
    }
}
]]></php>
                All we are doing is confirming that the cookie is set.
                As the value is likely to be rather cryptic it's not
                really worth testing this.
            </p>
            <p>
                The rest of the test would be the same as any other form,
                but we might want to confirm that we still have the same
                cookie after log-in as before we entered.
                We wouldn't want to lose track of this after all.
                Here is a possible test for this...
<php><![CDATA[
class LogInTest extends WebTestCase {
    function testSessionCookieSameAfterLogIn() {
        $this->get('http://www.my-site.com/login.php');<strong>
        $session = $this->getCookie('SID');
        $this->setField('u', 'Me');
        $this->setField('p', 'Secret');
        $this->clickSubmit('Log in');
        $this->assertWantedPattern('/Welcome Me/');
        $this->assertCookie('SID', $session);</strong>
    }
}
]]></php>
            </p>
        </section>
    </content>
    <internal>
        <link>
            <a href="#submit">Basic HTTP authentication</a>
        </link>
    </internal>
    <external>
        <link>
            SimpleTest project page on <a href="http://sourceforge.net/projects/simpletest/">SourceForge</a>.
        </link>
        <link>
            SimpleTest download page on <a href="http://www.lastcraft.com/simple_test.php">LastCraft</a>.
        </link>
        <link>
            The <a href="http://simpletest.sourceforge.net/">developer&apos;s API for SimpleTest</a>
            gives full detail on the classes and assertions available.
        </link>
    </external>
    <meta>
        <keywords>
            software development,
            php programming for clients,
            customer focused php,
            software development tools,
            acceptance testing framework,
            free php scripts,
            log in boxes,
            unit testing authentication systems,
            php resources,
            HTMLUnit,
            JWebUnit,
            php testing,
            unit test resource,
            web testing,
            HTTP authentication,
            testing log in,
            authentication testing,
            security tests
        </keywords>
    </meta>
</page>