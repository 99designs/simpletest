<?xml version="1.0"?>
<page title="Test runner documentation" here="Test runner">
    <long_title>SimpleTest for PHP test runner advanced documentation</long_title>
    <content>
        <section name="reporter" title="Selecting tests from the reporter">
            <p>
                The default action of SimpleTest is to run every test in
                the test suite.
                When refactoring, or before checking in new code, this is
                the type of behaviour you want.
                You cannot be sure you haven't broken something unless you
                run every test.
                Despite our best intentions to keep the test suite running
                quickly, there are some tests that will run slowly by
                their nature.
                When this happens we are faced with an unpleasant dilemma.
                We wait for the tests to run, breaking our flow, or we
                we run the tests less often.
                When we run the tests less often failures take longer
                to sort out, again breaking our flow.
            </p>
            <p>
                The simplest approach to running just a single test case is
                to load only that test case in the top level test script...
<php><![CDATA[
<?php
    require_once('simpletest/unit_tester.php');
    require_once('simpletest/reporter.php');
    
    $test = &new GroupTest('My tests);<strong>
    if (isset($_GET['c'])) {
        $test->addTestFile($_GET['c']);    
    } else {
        $test->addTestFile('test_a.php');    
        $test->addTestFile('test_b.php');    
    }</strong>
    
    $test->run(HtmlReporter());
?>
]]></php>
                This is OK if you want to run a whole test case, but not
                if you only want to run part of a test case because a single
                test method is causing particular difficulty.
                To work around this, the <code>SimpleReporter</code>
                has the option to run only particular test methods.
                Here is a Reporter subclass that only runs a single test
                method...
<php><![CDATA[<strong>
class OneTestReporter extends HtmlReporter {
    var $_just_this;
    
    function OneTestReporter($just_this, $encoding = 'ISO-8859-1') {
        $this->_just_this = $just_this;
        $this->HtmlReporter($encoding);
    }
    
    function invoke(&$runner, $method) {
        if ($method == $this->_just_this) {
            parent::invoke($runner, $method);
        }
    }
}</strong>
]]></php>
                It's then pretty straight forward to adjust the top level
                test script to select a single test...
<php><![CDATA[
<?php
    require_once('simpletest/unit_tester.php');
    require_once('one_test_reporter.php');
    
    $test = &new GroupTest('My tests);
    if (isset($_GET['c'])) {
        $test->addTestFile($_GET['c']);    
    } else {
        $test->addTestFile('test_a.php');    
        $test->addTestFile('test_b.php');    
    }
    <strong>
    if (isset($_GET['t'])) {
        $reporter = &new OneTestReporter($_GET['t']);
    } else {
        $reporter = &new HtmlReporter();
    }
    $test->run($reporter);</strong>
?>
]]></php>
                You shouldn't need these tricks too often though.
                If you have slow tests your priority should be to find
                ways of speeding them up.
                This may mean mocking out problematic resources and moving
                the lower level tests for these into separate test suites.
                Hopefully there is a refactoring that allows the less stressed
                areas of the application to run in their own separate test group.
            </p>
            <p>
                It may also mean that a full test run can only be run on a separate
                server.
                This technque is known as &quot;nightly builds&quot; when run overnight
                and &quot;continuous integration&quot; when done after every check-in.
            </p>
        </section>
        <section name="runner" title="The test cases run themselves">
        </section>
    </content>
    <internal>
        <link>
            Selecting tests from <a href="#reporter">the reporter</a>
        </link>
        <link>
            How the <a href="#runner">test cases run</a>
        </link>
    </internal>
    <external>
        <link>
            SimpleTest project page on <a href="http://sourceforge.net/projects/simpletest/">SourceForge</a>.
        </link>
        <link>
            SimpleTest download page on <a href="http://www.lastcraft.com/simple_test.php">LastCraft</a>.
        </link>
        <link>
            The <a href="http://simpletest.sourceforge.net/">developer&apos;s API for SimpleTest</a>
            gives full detail on the classes and assertions available.
        </link>
    </external>
    <meta>
        <keywords>
            php unit testing,
            documentation,
            test runner,
            controller,
            MVC pattern,
            marcus baker,
            simple test,
            simpletest,
            remote testing,
            extreme programming tests,
            automated testing
        </keywords>
    </meta>
</page>