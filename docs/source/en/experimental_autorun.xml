<?xml version="1.0"?>
<!-- $Id$ -->
<page title="Running the tests, the easy way with autorun" here="Autorunning test cases">
    <long_title>[experimental] Running the tests, the easy way with autorun</long_title>
    <content>
        <introduction>
            <div class="experimental">
                Careful : this documentation refers to un-released code. It's only available in CVS.
            </div>
            <p>
                You started with unit testing not so long ago and
                this is what you came up with... A file <em>test_of_all_modules.php</em>
                containing :
<php><![CDATA[
<?php
require_once('simpletest/unit_tester.php');
require_once('simpletest/reporter.php');

$group = new TestSuite();
$group->addFile('test_of_module_ship.php');
$group->addFile('test_of_module_pay.php');

$group->run(new HtmlReporter());
?>
]]></php>
            </p>
            <p>
                But now you have a new way of shipping your socks overseas. Easily
                you just need to add a new file <em>test_of_module_ship_overseas.php</em>
                to your test runner... Quickly enough, you end up with a lot of file :
<php><![CDATA[
<?php
require_once('simpletest/unit_tester.php');
require_once('simpletest/reporter.php');

$group = new TestSuite();
$group->addFile('test_of_module_ship.php');<strong>
$group->addFile('test_of_module_ship_overseas.php');
$group->addFile('test_of_module_ship_france.php');
$group->addFile('test_of_module_ship_uk.php');
$group->addFile('test_of_module_ship_us.php');
...</strong>
$group->addFile('test_of_module_pay.php');

$group->run(new HtmlReporter());
?>
]]></php>
            </p>
            <p>
                As you list grows, running the test suite becomes too time-
                consuming : the tests are actually slowing you down while writing code.
            </p>
        </introduction>
        <section name="autorun" title="Introducing 'autorun'">
            <p>
                What we're looking for now is a way to run one test at a time
                and still be able to run every one of them easily...
                What if we could just write - in a console for example :
                <div class="console">
                    home: /$ <strong>php test_of_module_ship_us.php</strong>
                </div>
                and still be able to do :
                <div class="console">
                    home: /$ <strong>php test_of_all_modules.php</strong>
                </div>
                It's possible now : you just need to add one include at the top of
                each test case. Your <em>test_of_module_ship_us.php</em> will
                look like :
<php><![CDATA[
<?php<strong>
require_once('simpletest/autorun.php');</strong>

class TestUsingParcelForce extends UnitTestCase {
  function testParcelForceIsFine() {
    $this->assertTrue(true);
  }
}

class TestUsingMyOwnAirplane extends UnitTestCase {
  function testUsingMyOwnAirplaneOnlyWorksForSmallGifts() {
    $this->assertFalse(false);
  }
}
?>
]]></php>
            </p>
        </section>
        <section name="preference" title="Setting the prefered runner">
            <p>
                PHP is mainly for web stuff : I'm guessing your first test platform is
                a web browser, Firefox, Opera or Safari usually. And SimpleTest comes with
                a nice HTML interface : it's the one we want to use when running one file.
                We can tell our <em>test_of_module_ship_us.php</em> to use it by default :
<php><![CDATA[
<?php
require_once('simpletest/autorun.php');<strong>
SimpleTest :: prefer(new HtmlReporter());</strong>

class TestUsingParcelForce extends UnitTestCase {
  function testParcelForceIsFine() {
    $this->assertTrue(true);
  }
}

class TestUsingMyOwnAirplane extends UnitTestCase {
  function testUsingMyOwnAirplaneOnlyWorksForSmallGifts() {
    $this->assertFalse(false);
  }
}
?>
]]></php>
            </p>
            <p>
                We get a nice green bar :
                <div class="demo">
                    <h1>TestSuite</h1>
                    <div style="padding: 8px; margin-top: 1em; background-color: green; color: white;">2/2 test cases complete:
                    <strong>2</strong> passes, <strong>0</strong> fails and <strong>0</strong> exceptions.</div>
                </div>
            </p>
        </section>
        <section name="autorun-for-suites" title="Autorun for test suites">
            <p>
                So we've managed to get the time spent running the test under control
                during the coding period. We now want to make sure all the tests still
                pass, all the time. Or at least after every commit to the SVN (or CVS)
                trunk.
            </p>
            <p>
                Such process is called <em>continuous integration</em> : Martin Fowler writes
                really well about this practice <cite>where members of a team integrate their
                work frequently [...]. Each integration is verified by an automated buid
                (including test) to detect integration errors as quickly as possible</cite>.
                So I can just give you the link :
                <a href="http://www.martinfowler.com/articles/continuousIntegration.html">Continuous Integration</a>.
            </p>
            <p>
                Now our post-commit hook in SVN (or Phing task if you prefer) doesn't need
                the HTML reporter. We need something useful at the command line : TextReporter
                to the rescue. Our <em>test_of_all_modules.php</em> becomes :
<php><![CDATA[
<?php
require_once('simpletest/autorun.php');
<strong>
SimpleTest :: prefer(new TextReporter());</strong>

class AllTests extends TestSuite {
  function AllTests() {
    parent::TestSuite();
    $this->addFile('test_of_module_ship.php');
    $this->addFile('test_of_module_ship_overseas.php');
    $this->addFile('test_of_module_ship_france.php');
    $this->addFile('test_of_module_ship_uk.php');
    $this->addFile('test_of_module_ship_us.php');
    ...
    $this->addFile('test_of_module_pay.php');
  }
}
?>
]]></php>
            </p>
            <p>
                The results show up nicely in the console :
                <div class="console">
                    home: /$ php test_of_all_modules.php<br />
                    <strong>grouptest<br />
                    OK<br />
                    Test cases run: 10/10, Passes: 37, Failures: 0, Exceptions: 0</strong>
                </div>
            </p>
        </section>
    </content>
    <internal>
        <link>Introducing <a href="#autorun">'autorun'</a>.</link>
        <link>Setting <a href="#preference">the prefered runner</a>.</link>
        <link>Autorun for <a href="#autorun-for-suites">test suites</a>.</link>
    </internal>
    <external>
        <link>
            The <a href="http://junit.sourceforge.net/doc/faq/faq.htm">JUnit FAQ</a>
            has plenty of useful testing advice.
        </link>
        <link>
            You will need the <a href="simple_test.php">SimpleTest testing framework</a>
            for these examples.
        </link>
    </external>
    <meta>
        <keywords>
            software development,
            php programming,
            programming php,
            software development tools,
            php tutorial,
            free php scripts,
            architecture,
            php resources,
            mock objects,
            junit,
            php testing,
            unit test,
            automated php testing,
            test cases tutorial,
            explain unit test case,
            unit test example,
            unit test
        </keywords>
    </meta>
</page>
