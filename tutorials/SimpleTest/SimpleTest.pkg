<refentry id="{@id}">
  <refnamediv>
    <refname>Simple Test PHP Unit Test Framework</refname>
    <refpurpose></refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <authorgroup>
    <author>
    Marcus Baker
    <authorblurb>
      Primary Developer {@link mailto:marcus@lastcraft.com marcus@lastcraft.com}
    </authorblurb>
    </author>
    <author>
    Harry Fuecks
    <authorblurb>
      Packager {@link mailto:harryf@users.sourceforge.net harryf@users.sourceforge.net}
    </authorblurb>
    </author>
    <author>
    Jason Sweat
    <authorblurb>
      Documentation {@link mailto:jsweat_php@yahoo.com jsweat_php@yahoo.com}
    </authorblurb>
    </author>
    </authorgroup>
  </refsynopsisdiv>
  <refsect1 id="{@id usage}">
    <title>Simple Test</title>
    <para>The heart of SimpleTest is a testing framework built around test case classes. These are written as extensions of base test case classes, each extended with methods that actually contain test code. Top level test scripts then invoke the <command>run()</command>  methods on every one of these test cases in order. Each test method is written to invoke various assertions that the developer expects to be true such as <command>assertEqual()</command>. If the expectation is correct, then a successful result is dispatched to the observing test reporter, but any failure triggers an alert and a description of the mismatch.</para>
  </refsect1>
  <refsect1 id="{@id testcase}">
    <title>Unit Test Case</title>
    <para>A test case looks like this...</para>
    <para>
     <programlisting role="php">
     <![CDATA[
class MyTestCase extends UnitTestCase {
    function MyTestCase() {
        $this->UnitTestCase();
    }
    function testLog() {
        $log = new Log("my.log");
        $log->message("Hello");
        $this->assertTrue(file_exists("my.log"));
    }
}
     ]]>
     </programlisting>
    </para>
    <para>
    These tools are designed for the developer. Tests are written in the PHP language itself more or less as the application itself is built. The advantage of using PHP itself as the testing language is that there are no new languages to learn, testing can start straight away, and the developer can test any part of the code. Basically, all parts that can be accessed by the application code can also be accessed by the test code if they are in the same language.
    </para>
    <para>
    The simplest type of test case is the <command>UnitTestCase</command>. This class of test case includes standard tests for equality, references and pattern matching. All these test the typical expectations of what you would expect the result of a function or method to be. This is by far the most common type of test in the daily routine of development, making up about 95% of test cases.
    </para>
  </refsect1>
  <refsect1 id="{@id webtestcase}">
    <title>Web Test Case</title>
    <para>
    The top level task of a web application though is not to produce correct output from it's methods and objects, but to generate web pages. The <command>WebTestCase</command> class tests web pages. It simulates a web browser requesting a page, complete with cookies and GET/POST parameters. With this type of test case, the developer can assert that information is present in the page and that forms and sessions are handled correctly.
    </para>
    <para>A web test case looks like this...</para>
    <para>
     <programlisting role="php">
     <![CDATA[
class MySiteTest extends WebTestCase {
    function MySiteTest() {
        $this->WebTestCase();
    }
    function testHomePage() {
        $this->get("http://www.my-site.com/index.php");
        $this->assertTitle("My Home Page");
        $this->clickLink("Contact");
        $this->assertTitle("Contact me");
        $this->assertWantedPattern("/Email me at/");
    }
}
     ]]>
     </programlisting>
    </para>
  </refsect1>
  <refsect1 id="{@id features}">
    <title>Features</title>
    <para>
    SimpleTest has a monthly release cycle. The following is a very rough outline of upcoming features and their expected point of release. I am afraid it is liable to change without warning as meeting the milestones rather depends on time available. Green stuff has been coded, but not necessarily released yet. If you have a pressing need for a green but unreleased feature then you should check-out the code from sourceforge CVS directly.
    </para>
    <table frame="all" id="{@id featuretab}">
    <tgroup cols="3">
      <thead align="center">
        <row>
          <entry>Feature</entry>
          <entry>Description</entry>
          <entry>Release</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>Unit test case</entry>
          <entry>Core test case class and assertions</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Html display</entry>
          <entry>Simplest possible display</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Autoloading of test cases</entry>
          <entry>Reading a file with test cases and loading them into a group test automatically</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Mock objects code generator</entry>
          <entry>Objects capable of simulating other objects removing test dependencies</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Server stubs</entry>
          <entry>Mocks without expectations to be used outside of test cases, e.g. for prototyping</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Integration of other unit testers</entry>
          <entry>The ability to read and simulate test cases from PHPUnit and PEAR::PhpUnit</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Web test case</entry>
          <entry>Basic pattern matching of fetched pages</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>HTML parsing of pages</entry>
          <entry>Allows link following and title tag matching</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Partial mocks</entry>
          <entry>Mocking parts of a class for testing less than a class or for complex simulations</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Web cookie handling</entry>
          <entry>Correct handling of cookies when fetching pages</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Following redirects</entry>
          <entry>Page fetching automatically follows 300 redirects</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Form parsing</entry>
          <entry>Ability to submit simple forms and read default form values</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Command line interface</entry>
          <entry>Test display without the need of a web browser</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Exposure of expectation classes</entry>
          <entry>Can create precise tests with mocks as well as test cases</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>XML output and parsing</entry>
          <entry>Allows multi host testing and the integration of acceptance testinG extensions</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>Command line test case</entry>
          <entry>Allows testing of utilities and file handling</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>PHP Documentor compatibility</entry>
          <entry>Ability to generate class level documentation</entry>
          <entry class="done">Done</entry>
        </row>
        <row>
          <entry>HTTP authentication</entry>
          <entry>Fetching protected web pages</entry>
          <entry class="upnext">Beta4</entry>
        </row>
        <row>
          <entry>Frames support</entry>
          <entry>Handling of frames and images in web test cases</entry>
          <entry class="upnext">Beta4</entry>
        </row>
        <row>
          <entry>Browser interface</entry>
          <entry>Exposure of lower level web browser interface for more detailed test cases</entry>
          <entry class="upnext">1.0</entry>
        </row>
        <row>
          <entry>Improved display</entry>
          <entry>Better web GUI with tree display of test cases</entry>
          <entry class="upnext">1.1</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
  <para>
  A PHP5 version will be released once PHP5 is broadly available.
  </para>
  <para>
  The wish list includes integration with other test systems including JUnit and XsltUnit, SSL support, an eclipse plug-in, SOAP testing and HTTP 1.1 support. In reality I doubt these will ever happen.
  </para>
  </refsect1>
</refentry>