<?php
    // $Id$
    
    if (!defined("SIMPLE_TEST")) {
        define("SIMPLE_TEST", "./");
    }

    /**
     *    Carries the reporter around the test suite.
     */
    class TestRunner {
        var $_reporter;
        
        /**
         *    Sets up an reporter to receive events.
         */
        function TestRunner(&$reporter) {
            $this->_reporter = &$reporter;
        }
        
        /**
         *    Pass event handler. Generated by a successful
         *    assertion.
         *    @param $message        Message to display.
         *    @public
         */
        function handlePass($message) {
            $this->_reporter->paintPass($message);
        }
        
        /**
         *    Fail event handler. Generated by a failed
         *    assertion.
         *    @param $message        Message to display.
         *    @public
         */
        function handleFail($message) {
            $this->_reporter->paintFail($message);
        }
        
        /**
         *    Sends a simple message to the reporter.
         *    @param $message        Message to display.
         *    @public
         */
        function handleMessage($message) {
            $this->_reporter->paintMessage($message);
        }
        
        /**
         *    Sends a formatted ASCII message to the reporter.
         *    @param $message        Message to display.
         *    @public
         */
        function handleFormattedMessage($message) {
            $this->_reporter->paintFormattedMessage($message);
        }
        
        /**
         *    Start of a test method.
         *    @param $method        Test method name.
         *    @public
         */
        function handleMethodStart($method) {
            $this->_reporter->paintStart($method, 0);
        }
        
        /**
         *    End of a test method.
         *    @param $method        Test method name.
         *    @public
         */
        function handleMethodEnd($method) {
            $this->_reporter->paintEnd($method, 0);
        }
        
        /**
         *    Start of a test case with test methods
         *    only. Reports only one internal test case.
         *    @param $label        Test case name.
         *    @public
         */
        function handleCaseStart($label) {
            $this->_reporter->paintStart($label, 1);
        }
        
        /**
         *    End of a test case with test methods
         *    only. Reports one test case completed.
         *    @param $label        Test case name.
         *    @public
         */
        function handleCaseEnd($label) {
            $this->_reporter->paintEnd($label, 1);
        }
        
        /**
         *    Start of a group test with held cases.
         *    @param $label        Test case name.
         *    @param $size         Number of test cases held.
         *    @public
         */
        function handleGroupStart($label, $size) {
            $this->_reporter->paintStart($label, $size);
        }
        
        /**
         *    End of a group test with held cases.
         *    @param $label        Test case name.
         *    @public
         */
        function handleGroupEnd($label) {
            $this->_reporter->paintEnd($label, 0);
        }
    }
    
    /**
     *    Can recieve test events and display them. Display
     *    is achieved by making display methods available
     *    and visiting the incoming event. Abstract.
     */
    class TestReporter {
        
        /**
         *    Does nothing.
         *    @public
         */
        function TestReporter() {
        }
        
        /**
         *    Paints the start of a test.
         *    @param $test_name     Name of test or other label.
         *    @param $size          Number of test cases starting.
         *    @public
         */
        function paintStart($test_name, $size) {
        }
        
        /**
         *    Paints the end of a test.
         *    @param $test_name     Name of test or other label.
         *    @param $progress      Number of cases just finished.
         *    @public
         */
        function paintEnd($test_name, $progress) {
        }
        
        /**
         *    Paints a pass. This will often output nothing.
         *    @param $message        Passing message.
         *    @public
         */
        function paintPass($message) {
        }
        
        /**
         *    Paints a failure.
         *    @param $message        Failure message from test.
         *    @public
         */
        function paintFail($message) {
        }
        
        /**
         *    Paints a simple supplementary message.
         *    @param $message        Text to display.
         *    @public
         */
        function paintMessage($message) {
        }
        
        /**
         *    Paints a formatted ASCII message such as a
         *    variable dump.
         *    @param $message        Text to display.
         *    @public
         */
        function paintFormattedMessage($message) {
        }
    }
?>